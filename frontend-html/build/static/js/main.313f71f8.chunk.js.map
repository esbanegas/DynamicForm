{"version":3,"sources":["controls/Button/index.js","containers/ManageQuestionsAnswers/data.js","controls/DynamicForm/index.js","containers/ManageQuestionsAnswers/components/CreateDynamicForm/index.js","containers/ManageQuestionsAnswers/index.js","App.js","serviceWorker.js","index.js"],"names":["ButtonPrimary","label","onClick","disabled","isButtonText","component","startIcon","endIcon","props","variant","Button","color","data","makeStyles","theme","root","margin","spacing","input","display","form1","block","questions","control","options","answers","form2","backgroundColor","border","width","padding","paper","useStyles","CreateDynamicForm","useState","isAddBlock","setIsAddBlock","classes","className","Grid","container","item","xs","TextField","fullWidth","id","textAlign","ManageQuestionsAnswers","createMuiTheme","palette","primary","main","secondary","background","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.313f71f8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, IconButton } from \"@material-ui/core\";\r\nimport PhotoCamera from \"@material-ui/icons/PhotoCamera\";\r\n\r\nexport const ButtonDefault = ({ label, onClick, disabled, isButtonText }) => {\r\n  const props = isButtonText ? {} : { variant: \"contained\" };\r\n  return (\r\n    <Button {...props} onClick={onClick} disabled={disabled}>\r\n      {label}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport const ButtonPrimary = ({\r\n  label,\r\n  onClick,\r\n  disabled,\r\n  isButtonText,\r\n  component,\r\n  startIcon,\r\n  endIcon,\r\n}) => {\r\n  const props = isButtonText ? {} : { variant: \"contained\" };\r\n\r\n  return (\r\n    <Button\r\n      {...props}\r\n      color=\"primary\"\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n      component={component}\r\n      startIcon={startIcon}\r\n      endIcon={endIcon}\r\n    >\r\n      {label}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport const ButtonSecundary = ({\r\n  label,\r\n  onClick,\r\n  disabled,\r\n  isButtonText,\r\n  component,\r\n  startIcon,\r\n  endIcon,\r\n}) => {\r\n  const props = isButtonText ? {} : { variant: \"contained\" };\r\n\r\n  return (\r\n    <Button\r\n      {...props}\r\n      color=\"secondary\"\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n      component={component}\r\n      startIcon={startIcon}\r\n      endIcon={endIcon}\r\n    >\r\n      {label}\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n}));\r\n\r\nexport const ButtonUploadImage = ({ isIconButton, label, onClick }) => {\r\n  const classes = useStyles();\r\n\r\n  const onChangeImage = (event, file) => {\r\n    debugger;\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <input\r\n        accept=\"image/*\"\r\n        className={classes.input}\r\n        id=\"upload-img\"\r\n        multiple\r\n        type=\"file\"\r\n        onChange={onChangeImage}\r\n      />\r\n\r\n      {isIconButton && (\r\n        <label htmlFor=\"upload-img\">\r\n          <IconButton\r\n            color=\"primary\"\r\n            aria-label=\"upload picture\"\r\n            component=\"span\"\r\n            // onClick={onClick}\r\n          >\r\n            <PhotoCamera />\r\n          </IconButton>\r\n        </label>\r\n      )}\r\n\r\n      {!isIconButton && (\r\n        <label htmlFor=\"upload-img\">\r\n          <ButtonPrimary label=\"upload\" component=\"span\" />\r\n        </label>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","export const data = {\r\n  form1: [\r\n    {\r\n      block: \"block1\",\r\n      questions: [\r\n        {\r\n          control: \"checkbox\",\r\n          label: \"Is language developer?\",\r\n          options: [\"C#\", \"JavaScript\", \"React\", \"Test.js\"],\r\n          answers: [],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n        block: \"block1\",\r\n        questions: [\r\n          {\r\n            control: \"checkbox\",\r\n            label: \"Is language developer?\",\r\n            options: [\"C#\", \"JavaScript\", \"React\", \"Test.js\"],\r\n            answers: [],\r\n          },\r\n        ],\r\n      },\r\n  ],\r\n\r\n  form2: [\r\n    {\r\n      block: \"block1\",\r\n      questions: [\r\n        {\r\n          control: \"checkbox\",\r\n          label: \"Types data in JavaScript?\",\r\n          options: [\"int\", \"array\", \"string\", \"decimal\", \"dynamic\"],\r\n          answers: [\"int\", \"decimal\", \"string\"],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n","import React from \"react\";\r\nimport { makeStyles, Paper } from \"@material-ui/core\";\r\n\r\nimport { data } from \"../../containers/ManageQuestionsAnswers/data\";\r\nimport { CheckboxControl } from \"../Checkbox\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"white\",\r\n    border: \"1px solid black\",\r\n    width: \"40rem\",\r\n    padding: \"1rem\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    // color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nexport const DynamicForm = ({ form }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      {form.map((f) =>\r\n        f.questions.map((s) => (\r\n          <Paper className={classes.paper}>\r\n            <span>{s.label}</span>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n              {s.options.map((option) => (\r\n                <CheckboxControl label={option} />\r\n              ))}\r\n            </div>\r\n          </Paper>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { TextField, makeStyles, Grid, Paper } from \"@material-ui/core\";\r\nimport { ButtonPrimary } from \"../../../../controls/Button\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"white\",\r\n    padding: \"1rem\",\r\n  },\r\n\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport const CreateDynamicForm = () => {\r\n  const [isAddBlock, setIsAddBlock] = useState(false);\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleAddBlock = () => {\r\n    setIsAddBlock(true);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <div className={classes.paper}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"form-title\"\r\n              label=\"Form Title\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n\r\n          <div className={classes.paper}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"form-description\"\r\n              label=\"Form Description\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n          <ButtonPrimary\r\n            label=\"Add Block\"\r\n            startIcon={<AddIcon />}\r\n            onClick={handleAddBlock}\r\n          />\r\n\r\n          <strong>Que onda Denis? que pps? que dicen las ni√±as?</strong>\r\n        </Grid>\r\n\r\n        {isAddBlock && (\r\n          <Grid item xs={12}>\r\n            <div>Block 1</div>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Grid, makeStyles, Paper } from \"@material-ui/core\";\r\n\r\nimport {\r\n  ButtonPrimary,\r\n  ButtonSecundary,\r\n  ButtonUploadImage,\r\n} from \"../../controls/Button\";\r\nimport { CheckboxControl } from \"../../controls/Checkbox\";\r\nimport { DynamicForm } from \"../../controls/DynamicForm\";\r\nimport { data } from \"./data\";\r\nimport { CreateDynamicForm } from \"./components/CreateDynamicForm\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"white\",\r\n    border: \"1px solid black\",\r\n    width: \"40rem\",\r\n    padding: \"1rem\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    textAlign: \"center\",\r\n    // color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nexport const ManageQuestionsAnswers = () => {\r\n  const [items, setItems] = useState(data);\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <CreateDynamicForm />\r\n\r\n          {/* <DynamicForm form={data.form1} /> */}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ManageQuestionsAnswers } from \"./containers/ManageQuestionsAnswers\";\r\n\r\nimport \"./App.css\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#2196f3\",\r\n    },\r\n    secondary: {\r\n      main: \"#f06292\",\r\n    },\r\n\r\n    \r\n\r\n    background: \"#cfd8dc\",\r\n  },\r\n});\r\n\r\nconst App = () => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className=\"App\">\r\n        <ManageQuestionsAnswers />\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}