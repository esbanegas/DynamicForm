{"version":3,"sources":["controls/Button/index.js","controls/DynamicForm/index.js","utils/index.js","controls/List/index.js","controls/Card/index.js","containers/ManageQuestionsAnswers/components/AddControls/index.js","containers/ManageQuestionsAnswers/components/CreateDynamicForm/index.js","containers/ManageQuestionsAnswers/index.js","services/restClient.js","containers/Polls/components/PollQuestionnaire/index.js","containers/Polls/components/PollsAnswered/index.js","containers/Polls/index.js","App.js","serviceWorker.js","index.js"],"names":["ButtonPrimary","label","onClick","disabled","isButtonText","component","startIcon","endIcon","props","variant","Button","color","makeStyles","theme","root","margin","spacing","input","display","backgroundColor","border","width","padding","paper","utils","showWait","hiddenWait","id","document","getElementById","className","FormatDate","value","date","isString","filter","split","d","length","Date","getMonth","getDate","getFullYear","FormatDateTime","getHours","getMinutes","getSeconds","getCurrentLocation","location","navigator","geolocation","getCurrentPosition","position","enableHighAccuracy","maximumAge","timeout","descendingComparator","a","b","orderBy","getComparator","order","stableSort","array","comparator","stabilizedThis","map","el","index","sort","copyOf","items","undefined","JSON","parse","stringify","evaluateObject","obj","Array","isArray","Object","keys","evaluateArray","hasErrorResponse","response","some","field","isError","getValueString","prop","getValueDate","useListStyles","list","activeItem","item","flexDirection","palette","secondary","main","ListControl","onSelectedItem","onRenderItem","fieldName","useState","selectedIndex","setSelectedIndex","classes","handleSelectedItem","key","event","Box","justifyContent","bgcolor","borderRadius","List","style","flex","overflow","ListItem","button","selected","useStyles","boxShadow","cardRoot","cardHeader","primary","cardComponent","left","top","background","CardControl","title","children","actions","Card","CardHeader","Divider","CardContent","CardActions","action","renderActions","textField","fontSize","textAlign","getRequestUserInfo","sessionStorage","requestUserInfo","objectParametize","q","parent","objKey","str","forEach","arrObject","isNumber","join","urlBase","window","host","showValidationMessage","exceptionMessage","toast","error","validationErrorMessage","warn","mensajeValidacion","mensajeError","returnResponse","json","restClient","httpGet","url","useWaitControl","isEvaluateMessage","urlparam","request","RequestUserInfo","paramUrl","fetch","catch","message","then","status","statusText","httpPost","uriFinal","bodyString","method","body","headers","httpPut","httpDelete","ExportToExcel","data","sheetName","documentNameXml","xmlData","amountDecimals","select","PollQuestionnaire","form","setForm","listFormId","setListFormId","sections","setSections","selectedSection","setSelectedSection","userId","setUserId","useEffect","fetchListForms","console","log","firstFormId","fetchSelectedForm","formId","firstForm","firstSection","getDetailAnswers","question","answerType","buildCheckBoxOptions","answers","buildTextFieldOption","buildRadioButtonOption","Grid","container","xs","FormControlLabel","control","Checkbox","name","answerDescription","onChange","handleOnChangeCkeckBox","selectedQuestion","questions","find","f","formQuestionId","element","formAnswerId","selectedValue","target","checked","copySection","radioButtonValue","FormControl","RadioGroup","aria-label","handleOnSelectedRadioButton","Radio","toString","handleOnSavePoll","success","TextField","multiline","rowsMax","placeholder","onBlur","InputLabelProps","shrink","fullWidth","InputLabel","Select","native","inputProps","description","sectionTitle","section","questionJsx","questionDescription","InputProps","readOnly","detailAnswers","evaluateQuestionControl","searchUserButton","PollsAnswered","poll","setPoll","listPollsId","setListPollId","componentRef","useRef","handlePrint","useReactToPrint","content","current","documentTitle","fetchSelectedPoll","pollId","firstPoll","onSearchUser","ref","IconButton","TabPanel","other","role","hidden","aria-labelledby","p","Typography","Polls","setValue","Tabs","newValue","indicatorColor","textColor","Tab","createMuiTheme","App","ThemeProvider","zIndex","Boolean","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f289352.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, IconButton } from \"@material-ui/core\";\r\nimport PhotoCamera from \"@material-ui/icons/PhotoCamera\";\r\n\r\nexport const ButtonDefault = ({ label, onClick, disabled, isButtonText }) => {\r\n  const props = isButtonText ? {} : { variant: \"contained\" };\r\n  return (\r\n    <Button {...props} onClick={onClick} disabled={disabled}>\r\n      {label}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport const ButtonPrimary = ({\r\n  label,\r\n  onClick,\r\n  disabled,\r\n  isButtonText,\r\n  component,\r\n  startIcon,\r\n  endIcon,\r\n  \r\n}) => {\r\n  const props = isButtonText ? {} : { variant: \"contained\" };\r\n\r\n  return (\r\n    <Button\r\n      {...props}\r\n      color=\"primary\"\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n      component={component}\r\n      startIcon={startIcon}\r\n      endIcon={endIcon}\r\n    >\r\n      {label}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport const ButtonSecundary = ({\r\n  label,\r\n  onClick,\r\n  disabled,\r\n  isButtonText,\r\n  component,\r\n  startIcon,\r\n  endIcon,\r\n}) => {\r\n  const props = isButtonText ? {} : { variant: \"contained\" };\r\n\r\n  return (\r\n    <Button\r\n      {...props}\r\n      color=\"secondary\"\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n      component={component}\r\n      startIcon={startIcon}\r\n      endIcon={endIcon}\r\n    >\r\n      {label}\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n}));\r\n\r\nexport const ButtonUploadImage = ({ isIconButton, label, onClick }) => {\r\n  const classes = useStyles();\r\n\r\n  const onChangeImage = (event, file) => {\r\n    \r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <input\r\n        accept=\"image/*\"\r\n        className={classes.input}\r\n        id=\"upload-img\"\r\n        multiple\r\n        type=\"file\"\r\n        onChange={onChangeImage}\r\n      />\r\n\r\n      {isIconButton && (\r\n        <label htmlFor=\"upload-img\">\r\n          <IconButton\r\n            color=\"primary\"\r\n            aria-label=\"upload picture\"\r\n            component=\"span\"\r\n            // onClick={onClick}\r\n          >\r\n            <PhotoCamera />\r\n          </IconButton>\r\n        </label>\r\n      )}\r\n\r\n      {!isIconButton && (\r\n        <label htmlFor=\"upload-img\">\r\n          <ButtonPrimary label=\"upload\" component=\"span\" />\r\n        </label>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { makeStyles, Paper } from \"@material-ui/core\";\r\n\r\nimport { data } from \"../../containers/ManageQuestionsAnswers/data\";\r\nimport { CheckboxControl } from \"../Checkbox\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"white\",\r\n    border: \"1px solid black\",\r\n    width: \"40rem\",\r\n    padding: \"1rem\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    // color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nexport const DynamicForm = ({ form }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      {form.map((f) =>\r\n        f.questions.map((s) => (\r\n          <Paper className={classes.paper}>\r\n            <span>{s.label}</span>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n              {s.options.map((option) => (\r\n                <CheckboxControl label={option} />\r\n              ))}\r\n            </div>\r\n          </Paper>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useRef } from 'react';\r\nimport { isArray, isString } from 'lodash';\r\n\r\nexport class utils {\r\n\r\n  static showWait = () => {\r\n    // const id = document.getElementById('spinner-love');\r\n    // id.className = 'container-love love-show';\r\n  }\r\n\r\n  static hiddenWait = () => {\r\n    const id = document.getElementById('spinner-love');\r\n    if(id){\r\n      id.className = 'container-love love-hide';\r\n    }\r\n  }\r\n\r\n  static FormatDate = value => {\r\n    let date = null;\r\n\r\n    if (isString(value) && value) {\r\n      date = value.split('/');\r\n      const filter = date.filter(d => d === 'NaN');\r\n\r\n      date = filter.length > 0 ? null : new Date(value);\r\n    } else {\r\n      date = value;\r\n    }\r\n\r\n    return date\r\n      ? `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`\r\n      : '';\r\n  };\r\n\r\n  static FormatDateTime = value => {\r\n    let date = null;\r\n\r\n    if (isString(value) && value) {\r\n      date = value.split('/');\r\n      const filter = date.filter(d => d === 'NaN');\r\n\r\n      date = filter.length > 0 ? null : new Date(value);\r\n    } else {\r\n      date = value;\r\n    }\r\n\r\n    return date\r\n      ? `${date.getMonth() +\r\n      1}/${date.getDate()}/${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`\r\n      : '';\r\n  };\r\n\r\n  static getCurrentLocation = () => {\r\n    let location = null;\r\n    const onSucccess = position => {\r\n      location = position;\r\n    }\r\n\r\n    const onError = () => {\r\n      location = null;\r\n    }\r\n\r\n    if (!!navigator.geolocation) {\r\n      var config = {\r\n        enableHighAccuracy: true,\r\n        maximumAge: 30000,\r\n        timeout: 27000\r\n      };\r\n\r\n      navigator.geolocation.getCurrentPosition(onSucccess, onError, config);\r\n    }\r\n\r\n    if (!location) {\r\n      return null;\r\n    }\r\n\r\n    return location;\r\n  }\r\n\r\n\r\n  static descendingComparator = (a, b, orderBy) => {\r\n    if (b[orderBy] < a[orderBy]) {\r\n      return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  static getComparator = (order, orderBy) => {\r\n    return order === 'desc'\r\n      ? (a, b) => utils.descendingComparator(a, b, orderBy)\r\n      : (a, b) => -utils.descendingComparator(a, b, orderBy);\r\n  }\r\n\r\n  static stableSort = (array, comparator) => {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0]);\r\n      if (order !== 0) return order;\r\n      return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map(el => el[0]);\r\n  }\r\n\r\n  static copyOf = items => {\r\n    if (items === undefined || items === null) {\r\n      return {};\r\n    }\r\n\r\n    const copy = JSON.parse(JSON.stringify(items));\r\n\r\n    return copy;\r\n  };\r\n\r\n  static evaluateObject = obj => {\r\n    if (Array.isArray(obj)) {\r\n      return false;\r\n    }\r\n\r\n    const result = !!(obj && Object.keys(obj).length);\r\n\r\n    return result;\r\n  };\r\n\r\n  static evaluateArray = array => {\r\n    if (!array || !isArray(array)) {\r\n      return false;\r\n    }\r\n\r\n    const result = !!(array && array.length);\r\n    return result;\r\n  };\r\n\r\n  static hasErrorResponse = response => {\r\n\r\n    const fieldErrors = [\r\n      'exceptionMessage',\r\n      'erroresValidacion',\r\n      'validationErrorMessage',\r\n      'mensajeValidacion',\r\n      'mensajeError',\r\n      'message',\r\n    ];\r\n\r\n    if (!response) {\r\n      return false;\r\n    }\r\n\r\n    const hasErrors = fieldErrors.some(field => {\r\n      if (typeof response[field] === 'object') {\r\n        const isError = utils.evaluateObject(response[field]);\r\n\r\n        if (isError) return isError;\r\n      }\r\n\r\n      if (typeof response[field] === 'string') {\r\n        if (response[field]) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    });\r\n\r\n    return hasErrors;\r\n  };\r\n\r\n  static getValueString = (prop, obj) => {\r\n    if (utils.evaluateObject(obj)) {\r\n      return obj[prop];\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\nstatic getValueDate = (prop, obj) => {\r\n    if (utils.evaluateObject(obj)) {\r\n      const valueProp = obj[prop] ? new Date(obj[prop]) : null;\r\n\r\n      return valueProp;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Box, List, ListItem, makeStyles } from \"@material-ui/core\";\r\nimport { utils } from \"../../utils\";\r\n\r\nconst useListStyles = makeStyles((theme) => ({\r\n  list: {\r\n    activeItem: {\r\n      backgroundColor: \"red\",\r\n    },\r\n  },\r\n\r\n  item: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    width: 200,\r\n\r\n    \"> strong\": {\r\n      color: theme.palette.secondary.main,\r\n    },\r\n  },\r\n}));\r\n\r\nexport const ListControl = ({\r\n  items,\r\n  onSelectedItem,\r\n  onRenderItem,\r\n  fieldName,\r\n}) => {\r\n  const [selectedIndex, setSelectedIndex] = useState(0);\r\n\r\n  const classes = useListStyles();\r\n\r\n  const handleSelectedItem = (item, key) => (event) => {\r\n    if (onSelectedItem) {\r\n      setSelectedIndex(key);\r\n      onSelectedItem(item);\r\n    }\r\n  };\r\n\r\n  const flexContainer = {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    flex: \"0 0 120px\",\r\n    padding: 1,\r\n    overflow: \"auto\",\r\n  };\r\n\r\n  return (\r\n    <Box justifyContent=\"left\" bgcolor=\"#F8F8F8\" borderRadius=\"8\">\r\n      <List component=\"nav\" style={flexContainer} classes={classes.list}>\r\n        {utils.evaluateArray(items) &&\r\n          items.map((item, key) => (\r\n            <ListItem\r\n              button\r\n              key={`CONS${key}`}\r\n              onClick={handleSelectedItem(item, key)}\r\n              selected={selectedIndex === key}\r\n            >\r\n              <div className={classes.item}>\r\n                {onRenderItem ? onRenderItem(item) : item[fieldName]}\r\n              </div>\r\n            </ListItem>\r\n          ))}\r\n      </List>\r\n    </Box>\r\n  );\r\n};\r\n\r\nListControl.propTypes = {\r\n  items: PropTypes.array,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Divider,\r\n  CardActions,\r\n} from \"@material-ui/core\";\r\nimport { ButtonPrimary } from \"../Button\";\r\nimport { utils } from \"../../utils\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    boxShadow: \"none\",\r\n  },\r\n  item: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  cardRoot: {\r\n    position: \"relative\",\r\n  },\r\n  cardHeader: {\r\n    color: theme.palette.primary.main,\r\n  },\r\n  cardComponent: {\r\n    position: \"absolute\",\r\n    left: 20,\r\n    top: 36,\r\n    background: \"#fff\",\r\n  },\r\n}));\r\n\r\nconst CardControl = ({ title, children, actions }) => {\r\n  const classes = useStyles();\r\n\r\n  const renderActions = (actions) => {\r\n    if (utils.evaluateArray(actions)) {\r\n      return actions.map((action) => {\r\n        return (\r\n          <ButtonPrimary\r\n            startIcon={action.startIcon}\r\n            label={action.label}\r\n            onClick={action.onClick}\r\n          />\r\n        );\r\n      });\r\n    }\r\n    return <div></div>;\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        classes={{\r\n          root: classes.cardRoot,\r\n          title: classes.cardHeader,\r\n        }}\r\n        title={title}\r\n      />\r\n      <Divider />\r\n      <CardContent>{children}</CardContent>\r\n      <Divider />\r\n      <CardActions>{renderActions(actions)}</CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nCardControl.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  child: PropTypes.element.isRequired,\r\n  actions: PropTypes.array,\r\n};\r\n\r\nexport default CardControl;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { IconButton, makeStyles, TextField } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CardControl from \"../../../../controls/Card\";\r\nimport RadioButtonCheckedIcon from \"@material-ui/icons/RadioButtonChecked\";\r\nimport TextFieldsIcon from \"@material-ui/icons/TextFields\";\r\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\r\nimport { ButtonPrimary } from \"../../../../controls/Button\";\r\nimport { RadioButtonTemplate } from \"./templates/RadioButtonTemplate\";\r\nimport { TextFieldTemplate } from \"./templates/TextFieldTemplate\";\r\nimport { CheckBoxTemplate } from \"./templates/CheckBoxTemplate\";\r\nimport { utils } from \"../../../../utils\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"white\",\r\n    border: \"1px solid black\",\r\n    width: \"40rem\",\r\n    padding: \"1rem\",\r\n    overflow: \"auto\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    width: \"100%\",\r\n\r\n    \"&:hover\": {\r\n      border: \".5px solid gray\",\r\n    },\r\n    // color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nexport const AddControl = ({ selectedSection, setSelectedSection }) => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [selectedQuestion, setSelectedQuestion] = useState({});\r\n\r\n  const classes = useStyles();\r\n\r\n  const controls = [\r\n    {\r\n      text: \"Option\",\r\n      key: \"radioButton\",\r\n      icon: <RadioButtonCheckedIcon />,\r\n    },\r\n    {\r\n      text: \"Text\",\r\n      key: \"textField\",\r\n      icon: <TextFieldsIcon />,\r\n    },\r\n    {\r\n      text: \"Checkbox\",\r\n      key: \"checkbox\",\r\n      icon: <CheckBoxIcon />,\r\n    },\r\n  ];\r\n\r\n  const handleSelectedControl = (control) => () => {\r\n    setQuestions([\r\n      ...questions,\r\n      { questionDescription: \"\", answerType: control.key },\r\n    ]);\r\n  };\r\n\r\n  const handleQuestionBlur = (index) => (event) => {\r\n    const questionsCopy = utils.copyOf(questions);\r\n\r\n    questionsCopy[index].questionDescription = event.target.value;\r\n\r\n    setQuestions(questionsCopy);\r\n  };\r\n\r\n  const handleSelectedQuestionClick = (question) => () => {\r\n    setSelectedQuestion(question);\r\n  };\r\n\r\n  const handleSelectAnswers = (selectedAnswers) => {\r\n    const questionsCopy = questions.map((s) =>\r\n      s.questionDescription === selectedQuestion.questionDescription\r\n        ? {\r\n            ...s,\r\n            answers: selectedAnswers.map((s) => ({\r\n              answerDescription: s.label,\r\n              value: s.value,\r\n            })),\r\n          }\r\n        : { ...s }\r\n    );\r\n\r\n    debugger\r\n\r\n    setQuestions(questionsCopy);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <CardControl title=\"Questions\">\r\n        {questions.map((question, index) => (\r\n          <div\r\n            style={{ display: \"flex\" }}\r\n            onClick={handleSelectedQuestionClick(question)}\r\n          >\r\n            <strong>{`${index + 1}.`}</strong>\r\n            <div className={classes.paper}>\r\n              <TextField\r\n                fullWidth\r\n                id=\"question-title\"\r\n                variant=\"outlined\"\r\n                placeholder=\"Pregunta\"\r\n                onBlur={handleQuestionBlur(index)}\r\n              />\r\n\r\n              <div style={{ marginTop: 5 }}>\r\n                {question.answerType === \"radioButton\" && (\r\n                  <RadioButtonTemplate onSelectAnswers={handleSelectAnswers} />\r\n                )}\r\n                {question.answerType === \"textField\" && <TextFieldTemplate />}\r\n                {question.answerType === \"checkbox\" && <CheckBoxTemplate />}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </CardControl>\r\n\r\n      <IconButton aria-label=\"delete\">\r\n        <AddIcon />\r\n      </IconButton>\r\n\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n        }}\r\n      >\r\n        {controls.map((control, index) => (\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignContent: \"center\",\r\n              marginLeft: index === 0 ? 0 : 5,\r\n            }}\r\n          >\r\n            <ButtonPrimary\r\n              startIcon={control.icon}\r\n              label={control.text}\r\n              onClick={handleSelectedControl(control)}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { TextField, makeStyles, Grid } from \"@material-ui/core\";\r\nimport { ButtonPrimary } from \"../../../../controls/Button\";\r\nimport { ListControl } from \"../../../../controls/List\";\r\nimport { utils } from \"../../../../utils\";\r\nimport { AddControl } from \"../AddControls\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"white\",\r\n    padding: \"1rem\",\r\n  },\r\n\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n  },\r\n\r\n  textField: {\r\n    fontSize: \"10rem\",\r\n  },\r\n}));\r\n\r\nexport const CreateDynamicForm = () => {\r\n  const [isAddBlock, setIsAddBlock] = useState(false);\r\n  const [form, setForm] = useState();\r\n  const [sections, setSections] = useState([]);\r\n  const [selectedSection, setSelectedSection] = useState({});\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleAddBlock = () => {\r\n    setIsAddBlock(true);\r\n    setSections([...sections, { sectionTitle: \"Add Section\" }]);\r\n  };\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    setForm({ ...form, [prop]: event.target.value });\r\n  };\r\n\r\n  const handleSelectedSection = (section) => setSelectedSection(section);\r\n\r\n  const handleSectionTitleBlur = (item) => (event) => {\r\n    const sectionIndex = sections.findIndex(\r\n      (s) => s.sectionTitle === item.sectionTitle\r\n    );\r\n    const sectionsCopy = utils.copyOf(sections);\r\n\r\n    sectionsCopy[sectionIndex].sectionTitle = event.target.value;\r\n    setSections(sectionsCopy);\r\n  };\r\n\r\n  const onRenderSection = (item) => (\r\n    <TextField\r\n      className={classes.textField}\r\n      fullWidth\r\n      id=\"form-title\"\r\n      variant=\"outlined\"\r\n      placeholder=\"Description Section\"\r\n      onBlur={handleSectionTitleBlur(item)}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <div className={classes.paper}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"form-title\"\r\n              label=\"Form Title\"\r\n              variant=\"outlined\"\r\n              onChange={handleChange(\"title\")}\r\n            />\r\n          </div>\r\n\r\n          <div className={classes.paper}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"form-description\"\r\n              label=\"Form Description\"\r\n              variant=\"outlined\"\r\n              onChange={handleChange(\"description\")}\r\n            />\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n          <ButtonPrimary\r\n            label=\"Add Section\"\r\n            startIcon={<AddIcon />}\r\n            onClick={handleAddBlock}\r\n          />\r\n        </Grid>\r\n\r\n        {utils.evaluateArray(sections) && (\r\n          <Grid item xs={12}>\r\n            <ListControl\r\n              items={sections}\r\n              onRenderItem={onRenderSection}\r\n              onSelectedItem={handleSelectedSection}\r\n            />\r\n\r\n            <AddControl\r\n              selectedSection={selectedSection}\r\n              setSelectedSection={setSelectedSection}\r\n            />\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\"\r\n\r\nimport { Grid, makeStyles, Paper } from \"@material-ui/core\";\r\n\r\nimport {\r\n  ButtonPrimary,\r\n  ButtonSecundary,\r\n  ButtonUploadImage,\r\n} from \"../../controls/Button\";\r\nimport { CheckboxControl } from \"../../controls/Checkbox\";\r\nimport { DynamicForm } from \"../../controls/DynamicForm\";\r\nimport { data } from \"./data\";\r\nimport { CreateDynamicForm } from \"./components/CreateDynamicForm\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"white\",\r\n    border: \"1px solid black\",\r\n    width: \"40rem\",\r\n    padding: \"1rem\",\r\n    overflow: 'auto'\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    textAlign: \"center\",\r\n    // color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nexport const ManageQuestionsAnswers = () => {\r\n  const [items, setItems] = useState(data);\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <CreateDynamicForm />\r\n\r\n          {/* <DynamicForm form={data.form1} /> */}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","import { toast } from 'react-toastify';\r\nimport { isArray, isString, isNumber } from 'lodash';\r\nimport { utils } from './../utils';\r\n\r\nconst getUrl = () => {\r\n  const env = window.location.host;\r\n\r\n   if (env === 'production') {\r\n    return 'http://0.0.0.0:4001/api/v1';\r\n  } \r\n  return 'http://localhost:5001';\r\n};\r\n\r\nexport const getRequestUserInfo = () =>\r\n  sessionStorage.requestUserInfo\r\n    ? JSON.parse(sessionStorage.requestUserInfo)\r\n    : null;\r\n\r\nexport const objectParametize = (obj, q, parent) => {\r\n  const str = [];\r\n  const delimeter = '&';\r\n  let objKey;\r\n  const a = Object.keys(obj);\r\n  a.forEach(key => {\r\n    switch (typeof obj[key]) {\r\n      case 'object':\r\n        if (obj[key]) {\r\n          if (isArray(obj[key])) {\r\n            obj[key].forEach(arrObject => {\r\n              if (parent) {\r\n                objKey = `${parent}.${key}`;\r\n              } else {\r\n                objKey = key;\r\n              }\r\n              if (isString(arrObject) || isNumber(arrObject)) {\r\n                if (parent) {\r\n                  str[str.length] = `${parent}.${key}=${arrObject}`;\r\n                }\r\n                str[str.length] = `${key}=${arrObject}`;\r\n              } else if (!isString(arrObject)) {\r\n                str[str.length] = objectParametize(arrObject, false, objKey);\r\n              }\r\n            });\r\n          } else if (isArray(obj[key])) {\r\n            str[str.length] = `${parent}.${key}=${obj[key]}`;\r\n          } else {\r\n            if (parent) {\r\n              objKey = `${parent}.${key}`;\r\n            } else {\r\n              objKey = key;\r\n            }\r\n            str[str.length] = objectParametize(obj[key], false, objKey);\r\n          }\r\n        }\r\n        break;\r\n      default: {\r\n        if (obj[key]) {\r\n          if (parent) {\r\n            str[str.length] = `${parent}.${key}=${obj[key]}`;\r\n          } else {\r\n            str[str.length] = `${key}=${obj[key]}`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  return (q === true ? '?' : '') + str.join(delimeter);\r\n};\r\n\r\nconst urlBase = getUrl();\r\n\r\nconst showValidationMessage = response => {\r\n  utils.hiddenWait();\r\n  if (response) {\r\n    if (response.exceptionMessage) {\r\n      toast.error(response.exceptionMessage);\r\n    } else if (response.validationErrorMessage) {\r\n      toast.warn(response.validationErrorMessage);\r\n    } else if (response.mensajeValidacion) {\r\n      toast.warn(response.mensajeValidacion);\r\n    } else if (response.mensajeError) {\r\n      toast.warn(response.mensajeError);\r\n    }\r\n\r\n    return response;\r\n  }\r\n  return response;\r\n};\r\n\r\nconst returnResponse = response => {\r\n  return response.json()\r\n}\r\n\r\nexport class restClient {\r\n  static httpGet = (\r\n    url,\r\n    obj,\r\n    useWaitControl = true,\r\n    isEvaluateMessage = true,\r\n  ) => {\r\n    if (useWaitControl) {\r\n      utils.showWait();\r\n    }\r\n\r\n    const request = {\r\n      ...obj,\r\n      RequestUserInfo: getRequestUserInfo(),\r\n    };\r\n    let urlparam;\r\n\r\n    if (request) {\r\n      urlparam = `&${objectParametize(request, false)}`;\r\n    }\r\n    const paramUrl = `${url}?accept: application/json${urlparam}`;\r\n    return fetch(`${urlBase}${paramUrl}`)\r\n      .catch(error => {\r\n        \r\n        if (useWaitControl) {\r\n          utils.hiddenWait();\r\n        }\r\n        toast.error(error.message);\r\n        return error;\r\n      })\r\n      .then(response => {\r\n\r\n        if (response && response.status && response.status === 404) {\r\n          return response;\r\n        }\r\n        return !response.message && response.json();\r\n      })\r\n      .then(response => {\r\n        \r\n        if (response && response.status && response.status === 404) {\r\n          if (useWaitControl) {\r\n            \r\n            utils.hiddenWait();\r\n          }\r\n          toast.error(response.statusText);\r\n          return response;\r\n        }\r\n\r\n        return isEvaluateMessage ? showValidationMessage(response) : response;\r\n      });\r\n  };\r\n\r\n  static httpPost = (url, obj, useWaitControl = true) => {\r\n    \r\n    if (useWaitControl) {\r\n      utils.showWait();\r\n    }\r\n    const request = {\r\n      ...obj\r\n    };\r\n    const uriFinal = `${urlBase}${url}`;\r\n    const bodyString = JSON.stringify(request);\r\n    \r\n    return fetch(uriFinal, {\r\n      method: 'POST',\r\n      body: bodyString,\r\n      headers: { 'Content-type': 'application/json'},\r\n    })\r\n      .catch(error => {\r\n        if (useWaitControl) {\r\n        }\r\n        toast.error(error.message);\r\n      })\r\n      \r\n      .then(response => returnResponse(response))\r\n      .then(response => showValidationMessage(response));\r\n  };\r\n\r\n\r\n  static httpPut = (url, obj, useWaitControl = true) => {\r\n    if (useWaitControl) {\r\n      utils.showWait();\r\n    }\r\n    const request = {\r\n      ...obj,\r\n      RequestUserInfo: getRequestUserInfo(),\r\n    };\r\n    return fetch(`${urlBase}${url}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(request),\r\n      headers: { 'Content-type': 'application/json' },\r\n    })\r\n      .catch(error => {\r\n        if (useWaitControl) {\r\n          \r\n          utils.hiddenWait();\r\n        }\r\n        toast.error(error.message);\r\n      })\r\n      .then(response => response.json())\r\n      .then(response => showValidationMessage(response));\r\n  };\r\n\r\n  static httpDelete = (url, obj, useWaitControl = true) => {\r\n    if (useWaitControl) {\r\n      \r\n      utils.showWait();\r\n    }\r\n    const request = {\r\n      ...obj,\r\n      RequestUserInfo: getRequestUserInfo(),\r\n    };\r\n    return fetch(`${urlBase}${url}`, {\r\n      method: 'DELETE',\r\n      body: JSON.stringify(request),\r\n      headers: { 'Content-type': 'application/json' },\r\n    })\r\n      .catch(error => {\r\n        if (useWaitControl) {\r\n          utils.hiddenWait();\r\n        }\r\n        toast.error(error.message);\r\n      })\r\n      .then(response => response.json())\r\n      .then(response => showValidationMessage(response));\r\n  };\r\n\r\n  /**\r\n   * @param {data} array<Object>\r\n   * @param {headers} object\r\n   * @param {sheetName} string\r\n   * @param {documentNameXml} string\r\n   * @param {xmlData} string\r\n   * @param {amountDecimals} number\r\n   */\r\n  static ExportToExcel = (\r\n    data,\r\n    headers,\r\n    sheetName,\r\n    documentNameXml,\r\n    xmlData,\r\n    amountDecimals = 2,\r\n  ) => {\r\n    const request = { data, headers, sheetName, xmlData, amountDecimals };\r\n\r\n    return restClient.httpPost('/common/export-excel-file', request, false);\r\n  };\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  TextField,\r\n  makeStyles,\r\n  Grid,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  RadioGroup,\r\n  FormControl,\r\n  Radio,\r\n  Select,\r\n  InputLabel \r\n} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CardControl from \"../../../../controls/Card\";\r\nimport { ListControl } from \"../../../../controls/List\";\r\nimport { utils } from \"../../../../utils\";\r\nimport { restClient } from \"./../../../../services/restClient\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"white\",\r\n    padding: \"1rem\",\r\n  },\r\n\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n  },\r\n  //\r\n\r\n  textField: {\r\n    fontSize: \"10rem\",\r\n  },\r\n  select:{\r\n    width: \"100%\",\r\n  }\r\n}));\r\n\r\nexport const PollQuestionnaire = () => {\r\n  const [form, setForm] = useState();\r\n  \r\n  const [listFormId, setListFormId]= useState([]);\r\n\r\n  const [sections, setSections] = useState([]);\r\n  const [selectedSection, setSelectedSection] = useState({});\r\n  \r\n  const [userId, setUserId] = useState('');\r\n  \r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    \r\n        fetchListForms();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    \r\n    console.log(selectedSection);\r\n}, [selectedSection]);\r\n\r\n  const fetchListForms = async () => {\r\n    const request = {\r\n    \r\n    };\r\n    const response = await restClient.httpGet(\"/Forms/list-formsId\", request);\r\n\r\n    if (utils.hasErrorResponse(response)) {\r\n      return;\r\n    }\r\n    if (!utils.evaluateArray(response)) {\r\n      toast.warn(\"Forms was not found !!\");\r\n      return;\r\n    }\r\n    setListFormId(response);\r\n    const firstFormId = response[0];\r\n    fetchSelectedForm(firstFormId);\r\n  };\r\n\r\n  \r\n  const fetchSelectedForm = async (formId) => {\r\n    const request = {\r\n      formId: formId,\r\n    };\r\n    const response = await restClient.httpGet(\"/Forms\", request);\r\n\r\n    if (utils.hasErrorResponse(response)) {\r\n      return;\r\n    }\r\n    if (!utils.evaluateArray(response)) {\r\n      toast.warn(\"Form was not found !!\");\r\n      return;\r\n    }\r\n\r\n    const firstForm = response[0];\r\n    const sections = firstForm.sections;\r\n    const firstSection =sections[0];\r\n    setForm(firstForm);\r\n    setSections(sections);\r\n    setSelectedSection(firstSection);\r\n\r\n    console.log(firstForm);\r\n    console.log(sections);\r\n    \r\n  };\r\n\r\n  const handleOnChangeFormId = (event) => {\r\n    const value = event.target.value;\r\n    fetchSelectedForm(value);\r\n  };\r\n\r\n  const handleOnChangeUserId = (event) => {\r\n    const value = event.target.value;\r\n    setUserId(value);\r\n  };\r\n\r\n\r\n\r\n  const handleSelectedSection = (section) => setSelectedSection(section);\r\n\r\n  function evaluateQuestionControl(question) {\r\n    const questionJsx = (\r\n      <TextField  variant=\"outlined\" value={question.questionDescription}\r\n                InputProps={{\r\n                  readOnly: true,}} />\r\n    );\r\n    const detailAnswers = getDetailAnswers(question);\r\n    return (\r\n      <div>\r\n        {questionJsx}\r\n        {detailAnswers}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const getDetailAnswers = (question) => {\r\n    switch (question.answerType) {\r\n      case \"checkBox\":\r\n        return buildCheckBoxOptions(question.answers);\r\n\r\n      case \"textField\":\r\n        return buildTextFieldOption(question.answers);\r\n\r\n      case \"radioButton\":\r\n        return buildRadioButtonOption(question, question.answers);\r\n\r\n      default:\r\n        return <div />;\r\n    }\r\n  };\r\n\r\n  const buildCheckBoxOptions = (answers) => {\r\n    if (utils.evaluateArray(answers)) {\r\n      return answers.map((a) => {\r\n        return (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <FormControlLabel\r\n                control={<Checkbox name={a.answerDescription} />}\r\n                          label={a.answerDescription}\r\n                          //checked={a.selectedValue}\r\n                          onChange={handleOnChangeCkeckBox(a)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleOnChangeTextField = (item) => (event) => {\r\n    \r\n    const selectedQuestion = selectedSection.questions.find(f=>f.formQuestionId === item.formQuestionId);\r\n    if(utils.evaluateObject(selectedQuestion)){\r\n\r\n      const selectedAnswer = selectedQuestion.answers.find(f=>f.formAnswerId === item.formAnswerId);\r\n      selectedAnswer.selectedValue = event.target.value;\r\n    }\r\n    const copySection = {...selectedSection };\r\n    setSelectedSection(copySection);\r\n    console.log(copySection);\r\n  };\r\n\r\n  const handleOnChangeCkeckBox = (item) => (event) => {\r\n    \r\n    const selectedQuestion = selectedSection.questions.find(f=>f.formQuestionId === item.formQuestionId);\r\n    if(utils.evaluateObject(selectedQuestion)){\r\n\r\n      selectedQuestion.answers.forEach(element => {\r\n        if (element.formAnswerId === item.formAnswerId) {\r\n          element.selectedValue = event.target.checked;\r\n        } \r\n      });\r\n    }\r\n    const copySection = {...selectedSection };\r\n    setSelectedSection(copySection);\r\n  };\r\n\r\n \r\n\r\n  const buildRadioButtonOption = (question, answers) => {\r\n      question.radioButtonValue ='';\r\n    return answers.map((item, index) => {\r\n      return (\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <FormControl component=\"fieldset\">\r\n              <RadioGroup\r\n                aria-label=\"options\"\r\n                name=\"option-control\"\r\n                onChange={handleOnSelectedRadioButton(item)}\r\n              >\r\n                \r\n                <FormControlLabel\r\n                  key={index}\r\n                  value={item.formAnswerId}\r\n                  control=\r\n                  {<Radio  checked={item.selectedValue ==='1'}/>}\r\n                  label={item.answerDescription}\r\n                />\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n      );\r\n    });\r\n  };\r\n\r\n  const handleOnSelectedRadioButton = (item) => (event) => {\r\n    \r\n    const selectedQuestion = selectedSection.questions.find(f=>f.formQuestionId === item.formQuestionId);\r\n    if(utils.evaluateObject(selectedQuestion)){\r\n      \r\n      const selectedValue = event.target.value;\r\n\r\n      selectedQuestion.answers.forEach(element => {\r\n        if (element.formAnswerId.toString() === selectedValue) {\r\n          element.selectedValue = \"1\";\r\n        } else{\r\n          element.selectedValue = \"\";\r\n        }\r\n      });\r\n    }\r\n    const copySection = {...selectedSection };\r\n    setSelectedSection(copySection);\r\n  };\r\n\r\n  const handleOnSavePoll= async ()=>{\r\n    \r\n    if(!utils.evaluateObject(form)){\r\n      toast.warn(\"Select a form to answer\");\r\n      return;\r\n    }\r\n    form.userId = userId;\r\n    const request = {\r\n      form: form,\r\n    };\r\n    const response = await restClient.httpPost(\"/Polls\", request);\r\n\r\n    if (utils.hasErrorResponse(response)) {\r\n      return;\r\n    }\r\n    toast.success(\"Data saved successfully\");\r\n    setForm({});\r\n    \r\n  }\r\n\r\n  const buildTextFieldOption = (answers) => {\r\n    if (utils.evaluateArray(answers)) {\r\n      return answers.map((a) => {\r\n        return (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n            <TextField\r\n              id='poll-question'\r\n              multiline\r\n              rowsMax={4}\r\n              placeholder={a.answerDescription}\r\n              value={a.selectedValue}\r\n              onBlur={handleOnChangeTextField(a)}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n            />\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  const renderActions =[{\r\n      label: 'save',\r\n      startIcon:  <SaveIcon/>,\r\n      onClick: handleOnSavePoll\r\n      \r\n    }];\r\n\r\n  const onRenderSection = (item) => (\r\n    <TextField\r\n      className={classes.textField}\r\n      fullWidth\r\n      value={item && item.sectionTitle}\r\n      id=\"form-title\"\r\n      variant=\"outlined\"\r\n      placeholder=\"\"\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n\r\n      <Grid item xs={12}>\r\n          <div className={classes.paper}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"form-userId\"\r\n              label=\"UserId\"\r\n              placeholder=\"Enter your user Id\"\r\n              variant=\"outlined\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              value={userId}\r\n              onChange={handleOnChangeUserId}\r\n            />\r\n          </div>\r\n\r\n          <div className={classes.paper}>\r\n          <FormControl variant=\"outlined\" className={classes.select}  InputLabelProps={{\r\n                  shrink: true,\r\n                }}>\r\n            <InputLabel shrink >FormId</InputLabel>\r\n              <Select\r\n                native\r\n                onChange={handleOnChangeFormId}\r\n                inputProps={{\r\n                  name: 'formId',\r\n                  id: 'formId',\r\n                }}  \r\n               >\r\n                  {listFormId && listFormId.map(f=>{\r\n                    return <option value={f}>{f}</option>\r\n                  })}\r\n              </Select>\r\n          </FormControl>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n          <div className={classes.paper}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"form-title\"\r\n              label=\"Form Title\"\r\n              variant=\"outlined\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n\r\n              value={form && form.title}\r\n              //onChange={handleChange(\"title\")}\r\n            />\r\n          </div>\r\n\r\n          <div className={classes.paper}>\r\n            <TextField\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              fullWidth\r\n              id=\"form-description\"\r\n              label=\"Form Description\"\r\n              value={form && form.description}\r\n              variant=\"outlined\"\r\n              //onChange={handleChange(\"description\")}\r\n            />\r\n          </div>\r\n        </Grid>\r\n\r\n        {utils.evaluateArray(sections) && (\r\n          <Grid item xs={12}>\r\n            <ListControl\r\n              items={sections}\r\n              onRenderItem={onRenderSection}\r\n              onSelectedItem={handleSelectedSection}\r\n            />\r\n\r\n            <CardControl title=\"Questions\"\r\n            actions={renderActions}\r\n            >\r\n              {selectedSection &&\r\n                selectedSection.questions &&\r\n                selectedSection.questions.map((question) => {\r\n                  return evaluateQuestionControl(question);\r\n                })}\r\n            </CardControl>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect,useRef } from \"react\";\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport {\r\n  TextField,\r\n  makeStyles,\r\n  Grid,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  RadioGroup,\r\n  FormControl,\r\n  Radio,\r\n  Select,\r\n  InputLabel,\r\n  IconButton\r\n} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport CardControl from \"../../../../controls/Card\";\r\nimport { ListControl } from \"../../../../controls/List\";\r\nimport { utils } from \"../../../../utils\";\r\nimport { restClient } from \"../../../../services/restClient\";\r\nimport { toast } from \"react-toastify\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"white\",\r\n    padding: \"1rem\",\r\n  },\r\n\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n  },\r\n  //\r\n\r\n  textField: {\r\n    fontSize: \"10rem\",\r\n  },\r\n  select:{\r\n    width: \"100%\",\r\n  },\r\n  searchUserButton:{\r\n    width:\"100%\"\r\n  }\r\n  \r\n}));\r\n\r\nexport const PollsAnswered = () => {\r\n  const [poll, setPoll] = useState();\r\n  \r\n  const [listPollsId, setListPollId]= useState([]);\r\n\r\n  const [sections, setSections] = useState([]);\r\n  const [selectedSection, setSelectedSection] = useState({});\r\n  \r\n  const [userId, setUserId] = useState('');\r\n  \r\n  const classes = useStyles();\r\n\r\n\r\n  useEffect(() => {\r\n    \r\n    console.log(selectedSection);\r\n}, [selectedSection]);\r\n\r\nconst componentRef = useRef();\r\nconst handlePrint = useReactToPrint({\r\n  content: () => componentRef.current,\r\n  documentTitle: `${userId}-Forms`\r\n});\r\n   \r\n  const fetchSelectedPoll = async (pollId) => {\r\n    const request = {\r\n      pollId: pollId,\r\n    };\r\n    const response = await restClient.httpGet(\"/Polls\", request);\r\n\r\n    if (utils.hasErrorResponse(response)) {\r\n      return;\r\n    }\r\n    if (!utils.evaluateArray(response)) {\r\n      toast.warn(\"Poll was not found !!\");\r\n      return;\r\n    }\r\n\r\n    const firstPoll = response[0];\r\n    const sections = firstPoll.sections;\r\n    const firstSection = sections[0];\r\n    setPoll(firstPoll);\r\n    setSections(sections);\r\n    setSelectedSection(firstSection);\r\n  };\r\n\r\n  function hanldeChecked(selectedValue){\r\n    debugger;\r\n    return selectedValue ===\"true\";\r\n  }\r\n\r\n  const onSearchUser = async () => {\r\n    const request = {\r\n      userId: userId\r\n    };\r\n    const response = await restClient.httpGet(\"/Polls/pollsId-by-user\", request);\r\n\r\n    if (utils.hasErrorResponse(response)) {\r\n      return;\r\n    }\r\n    if (!utils.evaluateArray(response)) {\r\n      toast.warn(\"Polls for selected user was not found\");\r\n      return;\r\n    }\r\n\r\n    setListPollId(response);\r\n    fetchSelectedPoll(response[0]);\r\n \r\n  };\r\n\r\n  const handleOnChangeFormId = (event) => {\r\n    const value = event.target.value;\r\n    fetchSelectedPoll(value);\r\n  };\r\n\r\n  const handleOnChangeUserId = (event) => {\r\n    const value = event.target.value;\r\n    setUserId(value);\r\n  };\r\n\r\n  const handleSelectedSection = (section) => setSelectedSection(section);\r\n\r\n  function evaluateQuestionControl(question) {\r\n    const questionJsx = (\r\n      <TextField  variant=\"outlined\" value={question.questionDescription}\r\n                InputProps={{\r\n                  readOnly: true,}} />\r\n    );\r\n    const detailAnswers = getDetailAnswers(question);\r\n    return (\r\n      <div>\r\n        {questionJsx}\r\n        {detailAnswers}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const getDetailAnswers = (question) => {\r\n    switch (question.answerType) {\r\n      case \"checkBox\":\r\n        return buildCheckBoxOptions(question.answers);\r\n\r\n      case \"textField\":\r\n        return buildTextFieldOption(question.answers);\r\n\r\n      case \"radioButton\":\r\n        return buildRadioButtonOption(question, question.answers);\r\n\r\n      default:\r\n        return <div />;\r\n    }\r\n  };\r\n\r\n  const buildCheckBoxOptions = (answers) => {\r\n    if (utils.evaluateArray(answers)) {\r\n      return answers.map((a) => {\r\n        return (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <FormControlLabel\r\n                control={<Checkbox name={a.answerDescription} />}\r\n                          label={a.answerDescription}\r\n                          checked={hanldeChecked(a.selectedValue)}\r\n                          onChange={handleOnChangeCkeckBox(a)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleOnChangeTextField = (item) => (event) => {\r\n    \r\n    const selectedQuestion = selectedSection.questions.find(f=>f.formQuestionId === item.formQuestionId);\r\n    if(utils.evaluateObject(selectedQuestion)){\r\n\r\n      const selectedAnswer = selectedQuestion.answers.find(f=>f.formAnswerId === item.formAnswerId);\r\n      selectedAnswer.selectedValue = event.target.value;\r\n    }\r\n    const copySection = {...selectedSection };\r\n    setSelectedSection(copySection);\r\n    console.log(copySection);\r\n  };\r\n\r\n  const handleOnChangeCkeckBox = (item) => (event) => {\r\n    \r\n    const selectedQuestion = selectedSection.questions.find(f=>f.formQuestionId === item.formQuestionId);\r\n    if(utils.evaluateObject(selectedQuestion)){\r\n\r\n      selectedQuestion.answers.forEach(element => {\r\n        if (element.formAnswerId === item.formAnswerId) {\r\n          element.selectedValue = event.target.checked;\r\n        } \r\n      });\r\n    }\r\n    const copySection = {...selectedSection };\r\n    setSelectedSection(copySection);\r\n  };\r\n\r\n \r\n\r\n  const buildRadioButtonOption = (question, answers) => {\r\n      question.radioButtonValue ='';\r\n    return answers.map((item, index) => {\r\n      return (\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <FormControl component=\"fieldset\">\r\n              <RadioGroup\r\n                aria-label=\"options\"\r\n                name=\"option-control\"\r\n                onChange={handleOnSelectedRadioButton(item)}\r\n              >\r\n                \r\n                <FormControlLabel\r\n                  key={index}\r\n                  value={item.formAnswerId}\r\n                  control=\r\n                  {<Radio  checked={item.selectedValue ==='1'}/>}\r\n                  label={item.answerDescription}\r\n                />\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n      );\r\n    });\r\n  };\r\n\r\n  const handleOnSelectedRadioButton = (item) => (event) => {\r\n    \r\n    const selectedQuestion = selectedSection.questions.find(f=>f.formQuestionId === item.formQuestionId);\r\n    if(utils.evaluateObject(selectedQuestion)){\r\n      \r\n      const selectedValue = event.target.value;\r\n\r\n      selectedQuestion.answers.forEach(element => {\r\n        if (element.formAnswerId.toString() === selectedValue) {\r\n          element.selectedValue = \"1\";\r\n        } else{\r\n          element.selectedValue = \"\";\r\n        }\r\n      });\r\n    }\r\n    const copySection = {...selectedSection };\r\n    setSelectedSection(copySection);\r\n  };\r\n\r\n  const handleOnSavePoll= async ()=>{\r\n    \r\n    if(!utils.evaluateObject(poll)){\r\n      toast.warn(\"Select a poll to answer\");\r\n      return;\r\n    }\r\n    poll.userId = userId;\r\n    const request = {\r\n      poll: poll,\r\n    };\r\n    const response = await restClient.httpPost(\"/Polls\", request);\r\n\r\n    if (utils.hasErrorResponse(response)) {\r\n      return;\r\n    }\r\n    toast.success(\"Data saved successfully\");\r\n    setPoll({});\r\n    \r\n  }\r\n\r\n  const buildTextFieldOption = (answers) => {\r\n    if (utils.evaluateArray(answers)) {\r\n      return answers.map((a) => {\r\n        return (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n            <TextField\r\n              id='poll-question'\r\n              multiline\r\n              rowsMax={4}\r\n              placeholder={a.answerDescription}\r\n              value={a.selectedValue}\r\n              onBlur={handleOnChangeTextField(a)}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n            />\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  const renderActions =[{\r\n      label: 'save',\r\n      startIcon:  <SaveIcon/>,\r\n      onClick: handleOnSavePoll\r\n      \r\n    }];\r\n\r\n  const onRenderSection = (item) => (\r\n    <TextField\r\n      className={classes.textField}\r\n      fullWidth\r\n      value={item && item.sectionTitle}\r\n      id=\"poll-title\"\r\n      variant=\"outlined\"\r\n      placeholder=\"\"\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3} ref={componentRef} >\r\n\r\n      <Grid item xs={12}>\r\n          <div className={classes.paper}>\r\n          <Grid container xs={12}>\r\n            <Grid item xs={8}>\r\n            <TextField\r\n                fullWidth\r\n                id=\"form-userId\"\r\n                label=\"UserId\"\r\n                placeholder=\"Enter your user Id\"\r\n                variant=\"outlined\"\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                value={userId}\r\n                onChange={handleOnChangeUserId}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={2} >\r\n\r\n            <IconButton color=\"secondary\" aria-label=\"search user\" onClick={onSearchUser}>\r\n              <SearchIcon />\r\n            </IconButton>\r\n                      \r\n            </Grid>\r\n            <Grid item xs={2} >\r\n            <IconButton color=\"secondary\" aria-label=\"print\" onClick={handlePrint}>\r\n              <PrintIcon />\r\n            </IconButton>\r\n            \r\n            </Grid>\r\n            \r\n          </Grid>\r\n         \r\n          </div>\r\n\r\n          <div className={classes.paper}>\r\n          <FormControl variant=\"outlined\" className={classes.select}  InputLabelProps={{\r\n                  shrink: true,\r\n                }}>\r\n            <InputLabel shrink >FormId</InputLabel>\r\n              <Select\r\n                native\r\n                onChange={handleOnChangeFormId}\r\n                inputProps={{\r\n                  name: 'formId',\r\n                  id: 'formId',\r\n                }}  \r\n               >\r\n                  {listPollsId && listPollsId.map(f=>{\r\n                    return <option value={f}>{f}</option>\r\n                  })}\r\n              </Select >\r\n          </FormControl>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n          <div className={classes.paper}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"poll-title\"\r\n              label=\"Form Title\"\r\n              variant=\"outlined\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n\r\n              value={poll && poll.title}\r\n              //onChange={handleChange(\"title\")}\r\n            />\r\n          </div>\r\n\r\n          <div className={classes.paper}>\r\n            <TextField\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              fullWidth\r\n              id=\"poll-description\"\r\n              label=\"Form Description\"\r\n              value={poll && poll.description}\r\n              variant=\"outlined\"\r\n              //onChange={handleChange(\"description\")}\r\n            />\r\n          </div>\r\n        </Grid>\r\n\r\n        {utils.evaluateArray(sections) && (\r\n          <Grid item xs={12}>\r\n            <ListControl\r\n              items={sections}\r\n              onRenderItem={onRenderSection}\r\n              onSelectedItem={handleSelectedSection}\r\n            />\r\n\r\n            <CardControl title=\"Questions\"\r\n            \r\n            >\r\n              {selectedSection &&\r\n                selectedSection.questions &&\r\n                selectedSection.questions.map((question) => {\r\n                  return evaluateQuestionControl(question);\r\n                })}\r\n            </CardControl>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Grid, makeStyles, Tabs, Tab, Box,Typography } from \"@material-ui/core\";\r\nimport { PollQuestionnaire } from \"./components/PollQuestionnaire\";\r\nimport { PollsAnswered } from \"./components/PollsAnswered\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"white\",\r\n    border: \"1px solid black\",\r\n    width: \"40rem\",\r\n    padding: \"1rem\",\r\n    overflow: 'auto'\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    textAlign: \"center\",\r\n    \r\n  },\r\n}));\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const Polls = () => {\r\n\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n\r\n            <Tabs\r\n              value={value}\r\n              onChange={handleChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"fullWidth\"\r\n              aria-label=\"polls\"\r\n            >\r\n              <Tab label=\"Forms To Answer\"/>\r\n              <Tab label=\"Forms answered\"/>\r\n            </Tabs>\r\n          \r\n        <TabPanel value={value} index={0} >\r\n          <PollQuestionnaire />\r\n        </TabPanel>\r\n        <TabPanel value={value} index={1} >\r\n          <PollsAnswered />\r\n        </TabPanel>\r\n          \r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { ManageQuestionsAnswers } from \"./containers/ManageQuestionsAnswers\";\r\nimport { Polls } from \"./containers/Polls\";\r\n\r\nimport \"./App.css\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#2196f3\",\r\n    },\r\n    secondary: {\r\n      main: \"#f06292\",\r\n    },\r\n\r\n    \r\n\r\n    background: \"#cfd8dc\",\r\n  },\r\n});\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n        <ThemeProvider theme={theme}>\r\n          <div className=\"App\">\r\n            <Polls />\r\n            {/* <ManageQuestionsAnswers/> */}\r\n          </div>\r\n        </ThemeProvider>\r\n        <ToastContainer style={{ zIndex: '2147483647' }} />\r\n    </div>\r\n\r\n    \r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}